#! /usr/bin/env python

import math
import rospy
import numpy
import message_filters
from sensor_msgs.msg import LaserScan
#from jaguar.msg import OdometryNative
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist
import tf
#import geometry_msgs
from numpy import pi, arange, sin, cos, sqrt, arcsin, arctan2, linspace
from geometry_msgs.msg import PoseStamped
from nav_msgs.msg import Path

pub = rospy.Publisher('/cmd_vel', Twist, queue_size = 1)
move_cmd = Twist()

speed_max = 0.5
omega_max = 2.5

def callback_laser(laser, odometry , markers):
    print("Inside Callback Laser,Odometry,Marker: ")
    global speed_max
    global omega_max
    global current_marker
    
    a=3.14/15.0                                                   
                                                       
    b=laser.ranges[1] 
    c=laser.ranges[0]
    
    print("b ",b)
    print("c " , c)
    
    theta=(numpy.arctan2((b*numpy.cos(a)-c),(numpy.sin(a)*b)))
    
    print ("theta " , theta)
    
    move_cmd.linear.x=0.03
    
    theta_desire = 1.0 * (c - 0.2)
    
    if (theta_desire > 0.3):
        theta_desire = 0.3
    if (theta_desire < -0.3):
        theta_desire = -0.3    
    
    move_cmd.angular.z= 0.6*(theta - theta_desire)
   
        
    #pub.publish(move_cmd) 
    
    # vitesse lineaire et angulaire du robot
    #move_cmd.linear.x = 0.1  #versionner tout le paquet et pas uniquement le script (c'est a dire les fichiers CMakeLists.txt, package.xml et les repertoire).
    #move_cmd.angular.z = - theta
    
    # on s'assure qu'on ne depasse pas les vitesses max
    if move_cmd.linear.x > speed_max:
        move_cmd.linear.x = speed_max
    if move_cmd.linear.x < -speed_max:
        move_cmd.linear.x = -speed_max

    if move_cmd.angular.z > omega_max:
        move_cmd.angular.z = omega_max
    if move_cmd.angular.z < -omega_max:
        move_cmd.angular.z = -omega_max
        
        
    pub.publish(move_cmd)
    
    

if __name__ == '__main__':
    
    rospy.init_node('SuiviMur', anonymous=True)
    
    speed_max = rospy.get_param('~speed_max', 0.5)
    omega_max = rospy.get_param('~omega_max', 2.5)
    
    laser_sub = message_filters.Subscriber("/simple_scan", LaserScan)
    odometry_sub = message_filters.Subscriber("/odom", Odometry)
    #command_sub = message_filters.Subscriber("/cmd_vel",Twist)
    
       
    ts = message_filters.ApproximateTimeSynchronizer([laser_sub, odometry_sub], 10, 0.1, allow_headerless=True)
    ts.registerCallback(callback_laser)
       
    #ts = message_filters.ApproximateTimeSynchronizer([command_sub], 10, 0.1, allow_headerless=True)
    #ts.registerCallback(callback_command_seul)

    print("C'est parti... ")
    rospy.spin()
